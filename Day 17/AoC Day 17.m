(* ::Package:: *)

(* ::Text:: *)
(*Written December 15th, 2019.*)


(* ::Subsubsection:: *)
(*Import*)


(* ::Input:: *)
(*input=ToExpression/@(StringSplit[#,","]&@Flatten[Import[FileNameJoin[{NotebookDirectory[],"Day17Input.txt"}],"Table"]][[1]]);*)
(*input=Thread[Range[0,Length[#]-1]->#&@input];*)


(* ::Input:: *)
(*ClearAll@runIntcode;*)
(*runIntcode[inputList_List,inputValues_List,initialPosition_Integer,initialBase_Integer,OptionsPattern[{"OutputSteps"->False}]]:=*)
(*Module[{*)
(*intcodeProgram,*)
(*stepList={},*)
(*outputValue={},*)
(**)
(*padLengths={1->5,2->5,3->3,4->3,5->4,6->4,7->5,8->5,9->3},*)
(**)
(*i,jump,counter,*)
(**)
(*j,inputValue,*)
(*outputFlag=0,*)
(*inputFlag=0,*)
(*fullOpCode,opCode,parameterModes,parameters,*)
(**)
(*relativeBase=initialBase,memory*)
(*},*)
(*intcodeProgram[n_Integer]:=0;*)
(*Do[intcodeProgram[inputList[[i,1]]]=inputList[[i,2]],{i,Length[inputList]}];*)
(**)
(*i=initialPosition;jump=1;counter=1;*)
(*j=1;*)
(**)
(*While[intcodeProgram[i]!=99,*)
(*fullOpCode=*)
(*PadLeft[IntegerDigits[intcodeProgram[i]],*)
(*IntegerDigits[intcodeProgram[i]][[-1]]/.padLengths];*)
(*opCode=FromDigits[fullOpCode[[-2;;]]];*)
(*parameterModes=Reverse[fullOpCode[[;;-3]]];*)
(*parameters=Table[*)
(*Which[*)
(*parameterModes[[j]]==0,*)
(*intcodeProgram[i+j],*)
(**)
(*parameterModes[[j]]==1,*)
(*i+j,*)
(**)
(*parameterModes[[j]]==2,*)
(*intcodeProgram[i+j]+relativeBase],*)
(*{j,Length[parameterModes]}];*)
(*jump=Length[parameterModes]+1;*)
(**)
(*If[OptionValue["OutputSteps"],*)
(*AppendTo[stepList,*)
(*Table[intcodeProgram[i+j],{j,0,Length[parameterModes]}]]];*)
(**)
(*Which[*)
(*opCode==1,*)
(*intcodeProgram[parameters[[3]]]=intcodeProgram[parameters[[2]]]+intcodeProgram[parameters[[1]]],*)
(**)
(*opCode==2,*)
(*intcodeProgram[parameters[[3]]]=intcodeProgram[parameters[[2]]]*intcodeProgram[parameters[[1]]],*)
(**)
(*opCode==3,*)
(*If[inputFlag==1,*)
(*Return[{#[[1,1,1]]->#[[1,1]]&/@DownValues[intcodeProgram][[;;-2]],i,relativeBase,outputValue}],*)
(**)
(*inputValue=inputValues[[j]];*)
(*intcodeProgram[parameters[[1]]]=inputValue;*)
(*inputFlag=1;*)
(*j+=1;];,*)
(**)
(*opCode==4,*)
(*AppendTo[outputValue,intcodeProgram[parameters[[1]]]];*)
(*outputFlag+=1;*)
(*(*Print[outputValue]*),*)
(**)
(*opCode==5,*)
(*If[intcodeProgram[parameters[[1]]]!=0,*)
(*i=intcodeProgram[parameters[[2]]];*)
(*jump=0],*)
(**)
(*opCode==6,*)
(*If[intcodeProgram[parameters[[1]]]==0,*)
(*i=intcodeProgram[parameters[[2]]];*)
(*jump=0],*)
(**)
(*opCode==7,*)
(*If[intcodeProgram[parameters[[1]]]<intcodeProgram[parameters[[2]]],*)
(*intcodeProgram[parameters[[3]]]=1,*)
(*intcodeProgram[parameters[[3]]]=0],*)
(**)
(*opCode==8,*)
(*If[intcodeProgram[parameters[[1]]]==intcodeProgram[parameters[[2]]],*)
(*intcodeProgram[parameters[[3]]]=1,*)
(*intcodeProgram[parameters[[3]]]=0],*)
(**)
(*opCode==9,*)
(*relativeBase+=intcodeProgram[parameters[[1]]],*)
(**)
(*opCode==99\[Or]i>Length[intcodeProgram],*)
(*Break[]*)
(*];*)
(*counter++;*)
(*If[counter>10000000,*)
(*Print["Infinite Loop"];*)
(*Break[]];*)
(*i+=jump;*)
(*];*)
(*If[intcodeProgram[i]==99,*)
(*Return[{#[[1,1,1]]->#[[1,1]]&/@DownValues[intcodeProgram][[;;-2]],i,relativeBase,outputValue,"Halt"}]];*)
(*If[*)
(*OptionValue["OutputSteps"],*)
(*{outputValue,stepList},*)
(*outputValue]*)
(*]*)


(* ::Subsubsection:: *)
(*Part 1*)


(* ::Input:: *)
(*state=runIntcode[input,{0},0,0];*)


(* ::Input:: *)
(**)


(* ::Input:: *)
(*StringJoin[FromCharacterCode/@state[[4]]]*)


(* ::Input:: *)
(*k=Join[*)
(*(#->1)&/@Position[Characters[StringSplit[StringJoin[FromCharacterCode/@state[[4]]],"\n"]],"#"],*)
(*(#->2)&/@Position[Characters[StringSplit[StringJoin[FromCharacterCode/@state[[4]]],"\n"]],"^"]];*)


(* ::Input:: *)
(*h=SparseArray[k];*)


(* ::Input:: *)
(*Total[*)
(*Times@@(#-1)&/@Quiet[*)
(*Select[*)
(*k,*)
(*Min[#[[1]]]>1\[And]Max[#[[1]]]<Max[k[[;;,1]]]\[And]*)
(*Total[{h[[#[[1,1]]+1,#[[1,2]]]],h[[#[[1,1]]-1,#[[1,2]]]],h[[#[[1,1]],#[[1,2]]+1]],h[[#[[1,1]],#[[1,2]]-1]]}]==4&][[;;,1]]*)
(*]]*)


(* ::Subsubsection:: *)
(*Part 2*)


(* ::Input:: *)
(*moves=Partition[*)
(*{"R",12,"L",8,"R",12,*)
(**)
(*"R",8,"R",6,"R",6,"R",8,*)
(**)
(*"R",12,"L",8,"R",12,*)
(**)
(*"R",8,"R",6,"R",6,"R",8,*)
(**)
(*"R",8,"L",8,"R",8,"R",4,"R",4,*)
(*"R",8,"L",8,"R",8,"R",4,"R",4,*)
(**)
(*"R",8,"R",6,"R",6,"R",8,*)
(**)
(*"R",8,"L",8,"R",8,"R",4,"R",4,*)
(*"R",8,"R",6,"R",6,"R",8,*)
(**)
(*"R",12,"L",8,"R",12},2]*)


(* ::Text:: *)
(*Verification*)


(* ::Input:: *)
(*{x,y}={9,1};*)
(*directions={{-1,0},{0,-1},{1,0},{0,1}};*)
(*Print[{x,y}];*)
(*Do[*)
(*If[move[[1]]=="R",*)
(*directions=RotateRight[directions],*)
(*directions=RotateLeft[directions]*)
(*];*)
(*{x,y}={x,y}+directions[[1]]*move[[2]];*)
(*Print[{move,{x,y}}];*)
(*If[h[[x,y]]==0,Break[]]*)
(*,{move,moves}]*)


(* ::Input:: *)
(**)
(*values=Join[*)
(*Flatten[*)
(*Flatten/@Map[*)
(*If[StringQ[#],ToCharacterCode[#],If[#==10,10,ToCharacterCode[ToString[#]]]]&,*)
(*{{"A",",","B",",","A",",","B",",","C",",","C",",","B",",","C",",","B",",","A",10},{"R",",",12,",","L",",",8,",","R",",",12,10},{"R",",",8,",","R",",",6,",","R",",",6,",","R",",",8,10},{"R",",",8,",","L",",",8,",","R",",",8,",","R",",",4,",","R",",",4,10}},*)
(*{2}]*)
(*],*)
(*{ToCharacterCode["n"],10}];*)


(* ::Input:: *)
(*input[[1]]=0->2;*)
(*state={input,0,0,0};*)
(**)
(*Do[state=runIntcode[state[[1]],{values[[v]]},state[[2]],state[[3]]];*)
(*If[Length[state]==5,Print[{v,values[[v]]}];Break[]]*)
(*,{v,Length[values]}]*)


(* ::Input:: *)
(*state[[4,-1]]*)
