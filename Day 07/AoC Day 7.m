(* ::Package:: *)

(* ::Text:: *)
(*Written December 7th, 2019.*)


(* ::Subsubsection:: *)
(*Import*)


(* ::Input:: *)
(*input=ToExpression/@(StringSplit[#,","]&/@Flatten[Import[FileNameJoin[{NotebookDirectory[],"Day7Input.txt"}],"Table"]])[[1]];*)


(* ::Subsubsection:: *)
(*Part 1*)


(* ::Input:: *)
(*runIntcode[inputList_List,inputValues_List,OptionsPattern[{"OutputSteps"->False}]]:=*)
(*Module[{*)
(*intcodeProgram=inputList,*)
(*stepList={},*)
(*outputValue=0,*)
(**)
(*padLengths={1->5,2->5,3->3,4->3,5->4,6->4,7->5,8->5},*)
(**)
(*i,jump,counter,*)
(**)
(*j,inputValue,*)
(*outputFlag,*)
(*fullOpCode,opCode,parameterModes,parameters*)
(*},*)
(**)
(*i=1;jump=1;counter=0;*)
(*j=1;*)
(**)
(*While[intcodeProgram[[i]]!=99,*)
(*fullOpCode=*)
(*PadLeft[IntegerDigits[intcodeProgram[[i]]],*)
(*IntegerDigits[intcodeProgram[[i]]][[-1]]/.padLengths];*)
(*opCode=FromDigits[fullOpCode[[-2;;]]];*)
(*parameterModes=Reverse[fullOpCode[[;;-3]]];*)
(*parameters=Table[*)
(*If[parameterModes[[j]]==0,*)
(*intcodeProgram[[i+j]]+1,*)
(*i+j],*)
(*{j,Length[parameterModes]}];*)
(*jump=Length[parameterModes]+1;*)
(**)
(*If[OptionValue["OutputSteps"],*)
(*AppendTo[stepList,*)
(*Join[intcodeProgram[[i;;i+Length[parameterModes]]]]]];*)
(**)
(*If[opCode!=4,outputFlag=False];*)
(**)
(*Which[*)
(*opCode==1,*)
(*intcodeProgram[[parameters[[3]]]]=intcodeProgram[[parameters[[2]]]]+intcodeProgram[[parameters[[1]]]],*)
(**)
(*opCode==2,*)
(*intcodeProgram[[parameters[[3]]]]=intcodeProgram[[parameters[[2]]]]*intcodeProgram[[parameters[[1]]]],*)
(**)
(*opCode==3,*)
(*inputValue=inputValues[[j]];*)
(*intcodeProgram[[parameters[[1]]]]=inputValue;*)
(*If[j<Length[inputValues],j++],*)
(**)
(*opCode==4,*)
(*outputValue=intcodeProgram[[parameters[[1]]]];*)
(*outputFlag=True;*)
(*Print[outputValue],*)
(**)
(*opCode==5,*)
(*If[intcodeProgram[[parameters[[1]]]]!=0,*)
(*i=intcodeProgram[[parameters[[2]]]]+1;*)
(*jump=0],*)
(**)
(*opCode==6,*)
(*If[intcodeProgram[[parameters[[1]]]]==0,*)
(*i=intcodeProgram[[parameters[[2]]]]+1;*)
(*jump=0],*)
(**)
(*opCode==7,*)
(*If[intcodeProgram[[parameters[[1]]]]<intcodeProgram[[parameters[[2]]]],*)
(*intcodeProgram[[parameters[[3]]]]=1,*)
(*intcodeProgram[[parameters[[3]]]]=0],*)
(**)
(*opCode==8,*)
(*If[intcodeProgram[[parameters[[1]]]]==intcodeProgram[[parameters[[2]]]],*)
(*intcodeProgram[[parameters[[3]]]]=1,*)
(*intcodeProgram[[parameters[[3]]]]=0],*)
(**)
(*opCode==99\[Or]i>Length[intcodeProgram],*)
(*Break[]*)
(*];*)
(*counter++;*)
(*If[counter>10000,*)
(*Print["Infinite Loop"];*)
(*Break[]];*)
(*i+=jump;*)
(*];*)
(*If[intcodeProgram[[i]]==99,Print["Halt"]];*)
(*If[*)
(*OptionValue["OutputSteps"],*)
(*{outputValue,stepList},*)
(*outputValue]*)
(*]*)


(* ::Input:: *)
(*Max[*)
(*Table[*)
(*Module[*)
(*{value=0},*)
(*Do[*)
(*value=runIntcode[input,{p,value}]*)
(*,{p,permutation}];*)
(*value*)
(*],*)
(*{permutation,Permutations[{0,1,2,3,4}]}]]*)


(* ::Subsubsection:: *)
(*Part 2*)


(* ::Input:: *)
(*runIntcodeAsync[inputList_List,inputValue_,startingPosition_Integer,OptionsPattern[{"OutputSteps"->False}]]:=*)
(*Module[{*)
(*intcodeProgram=inputList,*)
(*stepList={},*)
(*outputValue=0,*)
(**)
(*padLengths={1->5,2->5,3->3,4->3,5->4,6->4,7->5,8->5},*)
(**)
(*i,jump,counter,*)
(**)
(*j,*)
(*returnFlag=False,*)
(*fullOpCode,opCode,parameterModes,parameters*)
(*},*)
(**)
(*i=startingPosition;jump=1;counter=0;*)
(*j=1;*)
(**)
(*While[intcodeProgram[[i]]!=99,*)
(*fullOpCode=*)
(*PadLeft[IntegerDigits[intcodeProgram[[i]]],*)
(*IntegerDigits[intcodeProgram[[i]]][[-1]]/.padLengths];*)
(*opCode=FromDigits[fullOpCode[[-2;;]]];*)
(*parameterModes=Reverse[fullOpCode[[;;-3]]];*)
(*parameters=Table[*)
(*If[parameterModes[[j]]==0,*)
(*intcodeProgram[[i+j]]+1,*)
(*i+j],*)
(*{j,Length[parameterModes]}];*)
(*jump=Length[parameterModes]+1;*)
(**)
(*If[OptionValue["OutputSteps"],*)
(*AppendTo[stepList,*)
(*Join[intcodeProgram[[i;;i+Length[parameterModes]]]]]];*)
(**)
(*Which[*)
(*opCode==1,*)
(*intcodeProgram[[parameters[[3]]]]=intcodeProgram[[parameters[[2]]]]+intcodeProgram[[parameters[[1]]]],*)
(**)
(*opCode==2,*)
(*intcodeProgram[[parameters[[3]]]]=intcodeProgram[[parameters[[2]]]]*intcodeProgram[[parameters[[1]]]],*)
(**)
(*opCode==3,*)
(*If[returnFlag,*)
(*Return[{intcodeProgram,outputValue,i}],*)
(**)
(*intcodeProgram[[parameters[[1]]]]=inputValue;*)
(*returnFlag=True],*)
(**)
(*opCode==4,*)
(*outputValue=intcodeProgram[[parameters[[1]]]],*)
(*(*Print[outputValue];*)
(*Pause[0.5],*)*)
(**)
(*opCode==5,*)
(*If[intcodeProgram[[parameters[[1]]]]!=0,*)
(*i=intcodeProgram[[parameters[[2]]]]+1;*)
(*jump=0],*)
(**)
(*opCode==6,*)
(*If[intcodeProgram[[parameters[[1]]]]==0,*)
(*i=intcodeProgram[[parameters[[2]]]]+1;*)
(*jump=0],*)
(**)
(*opCode==7,*)
(*If[intcodeProgram[[parameters[[1]]]]<intcodeProgram[[parameters[[2]]]],*)
(*intcodeProgram[[parameters[[3]]]]=1,*)
(*intcodeProgram[[parameters[[3]]]]=0],*)
(**)
(*opCode==8,*)
(*If[intcodeProgram[[parameters[[1]]]]==intcodeProgram[[parameters[[2]]]],*)
(*intcodeProgram[[parameters[[3]]]]=1,*)
(*intcodeProgram[[parameters[[3]]]]=0],*)
(**)
(*opCode==99\[Or]i>Length[intcodeProgram],*)
(*Break[]*)
(*];*)
(*counter++;*)
(*If[counter>10000,*)
(*Print["Infinite Loop"];*)
(*Break[]];*)
(*i+=jump;*)
(*];*)
(*If[intcodeProgram[[i]]==99,Return[{intcodeProgram,outputValue,"Halt"}]];*)
(*If[*)
(*OptionValue["OutputSteps"],*)
(*{outputValue,stepList},*)
(*outputValue]*)
(*]*)


(* ::Input:: *)
(*Max@Table[*)
(*states=Table[runIntcodeAsync[input,phase,1],{phase,phases}];*)
(**)
(*states[[1]]=runIntcodeAsync[states[[1,1]],0,states[[1,3]]];*)
(*Do[*)
(*states[[i]]=runIntcodeAsync[states[[i,1]],states[[i-1,2]],states[[i,3]]],*)
(*{i,2,Length[phases]}];*)
(**)
(*Do[*)
(*Do[*)
(*states[[i]]=runIntcodeAsync[states[[i,1]],states[[Mod[i-1,Length[phases],1],2]],states[[i,3]]],*)
(*{i,1,Length[phases]}];*)
(**)
(*If[states[[-1,3]]=="Halt",Return[states[[-1,2]]]]*)
(*,{i,10}],*)
(*{phases,Permutations[{5,6,7,8,9}]}]*)
