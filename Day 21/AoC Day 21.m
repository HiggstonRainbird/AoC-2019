(* ::Package:: *)

(* ::Text:: *)
(*Written December 21st, 2019.*)
(*Finished December 24th, 2019.*)


(* ::Subsubsection:: *)
(*Import*)


(* ::Input:: *)
(*input=ToExpression/@(StringSplit[#,","]&@Flatten[Import[FileNameJoin[{NotebookDirectory[],"Day21Input.txt"}],"Table"]][[1]]);*)
(*input=Thread[Range[0,Length[#]-1]->#&@input];*)


(* ::Input:: *)
(*ClearAll@runIntcode;*)
(*runIntcode[inputList_List,inputValues_List,initialPosition_Integer,initialBase_Integer,OptionsPattern[{"OutputSteps"->False}]]:=*)
(*Module[{*)
(*intcodeProgram,*)
(*stepList={},*)
(*outputValue={},*)
(**)
(*padLengths={1->5,2->5,3->3,4->3,5->4,6->4,7->5,8->5,9->3},*)
(**)
(*i,jump,counter,*)
(**)
(*j,inputValue,*)
(*outputFlag=0,*)
(*inputFlag=0,*)
(*fullOpCode,opCode,parameterModes,parameters,*)
(**)
(*relativeBase=initialBase,memory*)
(*},*)
(*intcodeProgram[n_Integer]:=0;*)
(*Do[intcodeProgram[inputList[[i,1]]]=inputList[[i,2]],{i,Length[inputList]}];*)
(**)
(*i=initialPosition;jump=1;counter=1;*)
(*j=1;*)
(**)
(*While[intcodeProgram[i]!=99,*)
(*fullOpCode=*)
(*PadLeft[IntegerDigits[intcodeProgram[i]],*)
(*IntegerDigits[intcodeProgram[i]][[-1]]/.padLengths];*)
(*opCode=FromDigits[fullOpCode[[-2;;]]];*)
(*parameterModes=Reverse[fullOpCode[[;;-3]]];*)
(*parameters=Table[*)
(*Which[*)
(*parameterModes[[j]]==0,*)
(*intcodeProgram[i+j],*)
(**)
(*parameterModes[[j]]==1,*)
(*i+j,*)
(**)
(*parameterModes[[j]]==2,*)
(*intcodeProgram[i+j]+relativeBase],*)
(*{j,Length[parameterModes]}];*)
(*jump=Length[parameterModes]+1;*)
(**)
(*If[OptionValue["OutputSteps"],*)
(*AppendTo[stepList,*)
(*Table[intcodeProgram[i+j],{j,0,Length[parameterModes]}]]];*)
(**)
(*Which[*)
(*opCode==1,*)
(*intcodeProgram[parameters[[3]]]=intcodeProgram[parameters[[2]]]+intcodeProgram[parameters[[1]]],*)
(**)
(*opCode==2,*)
(*intcodeProgram[parameters[[3]]]=intcodeProgram[parameters[[2]]]*intcodeProgram[parameters[[1]]],*)
(**)
(*opCode==3,*)
(*If[inputFlag==1,*)
(*Return[{#[[1,1,1]]->#[[1,1]]&/@DownValues[intcodeProgram][[;;-2]],i,relativeBase,outputValue,counter}],*)
(**)
(*inputValue=inputValues[[j]];*)
(*intcodeProgram[parameters[[1]]]=inputValue;*)
(*j+=1;*)
(*If[j>Length[inputValues],*)
(*inputFlag=1;]];,*)
(**)
(*opCode==4,*)
(*AppendTo[outputValue,intcodeProgram[parameters[[1]]]];*)
(*outputFlag+=1;*)
(*(*Print[outputValue]*),*)
(**)
(*opCode==5,*)
(*If[intcodeProgram[parameters[[1]]]!=0,*)
(*i=intcodeProgram[parameters[[2]]];*)
(*jump=0],*)
(**)
(*opCode==6,*)
(*If[intcodeProgram[parameters[[1]]]==0,*)
(*i=intcodeProgram[parameters[[2]]];*)
(*jump=0],*)
(**)
(*opCode==7,*)
(*If[intcodeProgram[parameters[[1]]]<intcodeProgram[parameters[[2]]],*)
(*intcodeProgram[parameters[[3]]]=1,*)
(*intcodeProgram[parameters[[3]]]=0],*)
(**)
(*opCode==8,*)
(*If[intcodeProgram[parameters[[1]]]==intcodeProgram[parameters[[2]]],*)
(*intcodeProgram[parameters[[3]]]=1,*)
(*intcodeProgram[parameters[[3]]]=0],*)
(**)
(*opCode==9,*)
(*relativeBase+=intcodeProgram[parameters[[1]]],*)
(**)
(*opCode==99\[Or]i>Length[intcodeProgram],*)
(*Break[]*)
(*];*)
(*counter++;*)
(*If[counter>10000000,*)
(*Print["Infinite Loop"];*)
(*Break[]];*)
(*i+=jump;*)
(*];*)
(*If[intcodeProgram[i]==99,*)
(*Return[{#[[1,1,1]]->#[[1,1]]&/@DownValues[intcodeProgram][[;;-2]],i,relativeBase,outputValue,counter,"Halt"}]];*)
(*If[*)
(*OptionValue["OutputSteps"],*)
(*{outputValue,stepList},*)
(*outputValue]*)
(*]*)


(* ::Subsubsection:: *)
(*Part 1*)


(* ::Input:: *)
(*listOfInstructions=Flatten[Table[StringJoin[instruction<>" "<>x<>" "<>y<>"\n"],{instruction,{"AND","OR","NOT"}},{x,{"A","B","C","D","T","J"}},{y,{"T","J"}}]];*)
(*listOfInstructions=Complement[*)
(*listOfInstructions,*)
(*Select[listOfInstructions,StringSplit[#][[1]]!="NOT"\[And]StringSplit[#][[2]]==StringSplit[#][[3]]&]*)
(*];*)


(* ::Input:: *)
(*bestList={{"",4662}};*)
(**)
(*Do[*)
(*globalWatch=i;*)
(*commands=*)
(*Flatten[*)
(*ToCharacterCode/@*)
(*Characters[*)
(*StringJoin[RandomChoice[listOfInstructions,RandomInteger[{10,14}]]]<>"WALK\n"]];*)
(*state=runIntcode[input,commands,0,0];*)
(*If[state[[5]]>bestList[[-1,-1]],*)
(*AppendTo[bestList,{commands,state[[5]]}];*)
(*Print[{i,bestList[[-1,-1]]}]*)
(*]*)
(*,{i,1000}]*)


(* ::Input:: *)
(*{FromCharacterCode[bestList[[-1,1]]],bestList[[-1,2]]}*)


(* ::Subsubsection:: *)
(*Part 2*)


(* ::Input:: *)
(*listOfInstructions=Flatten[Table[StringJoin[instruction<>" "<>x<>" "<>y<>"\n"],{instruction,{"AND","OR","NOT"}},{x,{"A","B","C","D","E","F","G","H","I","T","J"}},{y,{"T","J"}}]];*)
(*listOfInstructions=Complement[*)
(*listOfInstructions,*)
(*Select[listOfInstructions,StringSplit[#][[1]]!="NOT"\[And]StringSplit[#][[2]]==StringSplit[#][[3]]&]*)
(*];*)


(* ::Input:: *)
(*bestList={{"",4638}};*)
(**)
(*Do[*)
(*globalWatch=i;*)
(*commands=*)
(*Flatten[*)
(*ToCharacterCode/@*)
(*Characters[*)
(*StringJoin[RandomChoice[listOfInstructions,14]]<>"RUN\n"]];*)
(*state=runIntcode[input,commands,0,0];*)
(*If[state[[5]]>bestList[[-1,-1]],*)
(*AppendTo[bestList,{commands,state[[5]]}];*)
(*Print[{i,bestList[[-1,-1]]}]*)
(*]*)
(*,{i,1000}]*)


(* ::Input:: *)
(**)


(* ::Input:: *)
(*predictMove[extendedState_List,instructions_List]:=*)
(*Module[*)
(*{registers},*)
(*Table[registers[CharacterRange["A","I"][[i]]]=extendedState[[i]],{i,9}];*)
(*registers["J"]=0;*)
(*registers["T"]=0;*)
(*Do[*)
(*Which[*)
(*inst[[1]]=="AND",*)
(*registers[inst[[3]]]=Boole[registers[inst[[2]]]==1\[And]registers[inst[[3]]]==1],*)
(**)
(*inst[[1]]=="OR",*)
(*registers[inst[[3]]]=Boole[registers[inst[[2]]]==1\[Or]registers[inst[[3]]]==1],*)
(**)
(*inst[[1]]=="NOT",*)
(*registers[inst[[3]]]=Boole[registers[inst[[2]]]!=1]*)
(**)
(*];,*)
(*{inst,instructions}];*)
(**)
(*Return[registers["J"]]*)
(*];*)
(**)
(*evaluateState[extendedState_List,inst_List]:=*)
(*Module[*)
(*{pos=1,alive=True},*)
(*While[pos<=(Length[extendedState]-9),*)
(*If[*)
(*extendedState[[pos]]==0,*)
(*alive=False;*)
(*Break[],*)
(**)
(*If[Total[extendedState[[pos+1;;]]]==Length[extendedState[[pos+1;;]]],*)
(*Break[];*)
(*];*)
(*If[predictMove[extendedState[[pos+1;;]],inst]==1,*)
(*pos+=4,*)
(*pos+=1;*)
(*];*)
(*]];*)
(*Return[alive]*)
(*];*)
(**)
(*evaluateInstructions[instructionList_,stateList_]:=*)
(*Module[{success},*)
(*success=True;*)
(*Do[*)
(*If[*)
(*evaluateState[*)
(*s,*)
(*StringSplit[#," "]&/@StringSplit[FromCharacterCode[instructionList],"\n"]*)
(*]==False,*)
(*success=False;*)
(*Break[]],*)
(*{s,stateList}];*)
(*Return[success]]*)
(**)
(*listOfInstructions=Flatten[Table[StringJoin[instruction<>" "<>x<>" "<>y<>"\n"],{instruction,{"AND","OR","NOT"}},{x,{"A","B","C","D","E","F","G","H","I","T","J"}},{y,{"T","J"}}]];*)
(*listOfInstructions=Complement[*)
(*listOfInstructions,*)
(*Select[listOfInstructions,StringSplit[#][[1]]!="NOT"\[And]StringSplit[#][[2]]==StringSplit[#][[3]]&]*)
(*];*)


(* ::Input:: *)
(*bestList={{"",0,4638}};*)
(*statesToCheck={{1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};*)
(**)
(*AbsoluteTiming[*)
(*Do[*)
(*globalWatch=i;*)
(*commands=*)
(*Flatten[*)
(*ToCharacterCode/@*)
(*Characters[*)
(*StringJoin[RandomChoice[listOfInstructions,14]]]];*)
(*current=evaluateInstructions[commands,statesToCheck];*)
(*If[current,*)
(*state=*)
(*runIntcode[input,*)
(*Join[commands,*)
(*Flatten[*)
(*ToCharacterCode/@*)
(*Characters["RUN\n"]]],0,0];*)
(*AppendTo[bestList,{commands,Length[statesToCheck],state[[5]]}];*)
(*AppendTo[statesToCheck,PadRight[Characters[StringSplit[StringJoin[FromCharacterCode/@state[[4]]],"\n"][[11]]]/.{"#"->1,"."->0},26,1]];*)
(*statesToCheck=DeleteDuplicates[statesToCheck];*)
(*Print[{i,bestList[[-1,2]],bestList[[-1,3]]}]*)
(*]*)
(*,{i,10^6}]]*)


(* ::Input:: *)
(*Dynamic[globalWatch]*)


(* ::Input:: *)
(**)


(* ::Input:: *)
(**)


(* ::Input:: *)
(**)


(* ::Subsubsection:: *)
(*Seeded Random Search*)


(* ::Input:: *)
(*bestList={{"",0,4638}};*)
(*statesToCheck={{1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};*)
(**)
(*seedList={"NOT F J*)
(*","NOT A J*)
(*","OR A J*)
(*","AND C J*)
(*","AND D J*)
(*","AND A J*)
(*","AND B J*)
(*","NOT J J*)
(*","AND D J*)
(*"}; (*Taken from best result of regular random search*)*)
(**)
(*AbsoluteTiming[*)
(*Do[*)
(*globalWatch=i;*)
(*commands=*)
(*Flatten[*)
(*ToCharacterCode/@*)
(*Characters[*)
(*StringJoin[*)
(*Nest[*)
(*Insert[*)
(*#,*)
(*RandomSample[listOfInstructions][[1]],*)
(*RandomInteger[{1,Length[#]}]]&,*)
(*seedList,*)
(*RandomInteger[{1,5}]]*)
(*]]];*)
(*current=evaluateInstructions[commands,statesToCheck];*)
(*If[current,*)
(*state=*)
(*runIntcode[input,*)
(*Join[commands,*)
(*Flatten[*)
(*ToCharacterCode/@*)
(*Characters["RUN\n"]]],0,0];*)
(*AppendTo[bestList,{commands,Length[statesToCheck],state[[5]]}];*)
(*AppendTo[statesToCheck,PadRight[Characters[StringSplit[StringJoin[FromCharacterCode/@state[[4]]],"\n"][[11]]]/.{"#"->1,"."->0},26,1]];*)
(*statesToCheck=DeleteDuplicates[statesToCheck];*)
(*Print[{i,bestList[[-1,2]],bestList[[-1,3]]}]*)
(*]*)
(*,{i,3*10^6}]]*)


(* ::Input:: *)
(*statesToCheck*)


(* ::Input:: *)
(*bestList[[5]]*)


(* ::Input:: *)
(*runIntcode[input,*)
(*Join[bestList[[7,1]],*)
(*Flatten[*)
(*ToCharacterCode/@*)
(*Characters["RUN\n"]]],0,0][[5]]*)


(* ::Input:: *)
(*FromCharacterCode[bestList[[6,1]]]*)
