(* ::Package:: *)

(* ::Text:: *)
(*Written December 18th, 2019.*)
(*Finished December 21st, 2019.*)


(* ::Subsubsection:: *)
(*Import*)


(* ::Input:: *)
(*input=Characters/@Flatten[Import[FileNameJoin[{NotebookDirectory[],"Day18Input.txt"}],"Table"]];*)


(* ::Subsubsection:: *)
(*Part 1*)


(* ::Input:: *)
(*position=FirstPosition[input,"@"];*)
(*board=Flatten[Table[{i,j}->input[[i,j]],{i,Length[input]},{j,Length[input[[i]]]}]];*)
(*viewBoard=SparseArray[board];*)
(**)
(*doors=Sort[viewBoard[[#[[1]],#[[2]]]]->#&/@Position[input,_?(UpperCaseQ[#]&),{2},Heads->False]];*)
(*keys=Join[{"@"->position},Sort[viewBoard[[#[[1]],#[[2]]]]->#&/@Position[input,_?(LowerCaseQ[#]&),{2},Heads->False]]];*)
(**)
(*style={Background->GrayLevel[0],BaseStyle->{Directive[White,EdgeForm[],Opacity[1]]},VertexShapeFunction->(Rectangle[#1+.5,#1-.5]&),EdgeShapeFunction->(Rectangle[#1[[1]]+.5,#1[[2]]-.5]&)};*)
(*g=Graph[*)
(*Union[Flatten[Table[*)
(*If[*)
(*StringMatchQ[viewBoard[[i,j]],Except[{"#"}]],*)
(*{If[StringMatchQ[viewBoard[[i+1,j]],Except[{"#"}]],ToString[{i,j}]\[UndirectedEdge]ToString[{i+1,j}]],*)
(*If[StringMatchQ[viewBoard[[i,j+1]],Except[{"#"}]],ToString[{i,j}]\[UndirectedEdge]ToString[{i,j+1}]]}*)
(*],{i,81-1},{j,81-1}]]][[2;;]]];*)


(* ::Input:: *)
(*keyDistances=*)
(*Table[*)
(*key->GraphDistance[g,ToString[key[[1]]/.keys],ToString[key[[2]]/.keys]],*)
(*{key,Subsets[keys,{2}][[;;,;;,1]]}];*)
(**)
(*doorCoordinates=ToString[#[[2]]]->#[[1]]&/@doors;*)
(*doorsBetween=Table[*)
(*key->Intersection[*)
(*FindShortestPath[g,ToString[key[[1]]/.keys],ToString[key[[2]]/.keys]],*)
(*ToString/@doors[[;;,2]]]/.*)
(*doorCoordinates,*)
(*{key,Subsets[keys,{2}][[;;,;;,1]]}];*)


(* ::Input:: *)
(**)
(**)


(* ::Input:: *)
(*obtainableKeys[currentKey_String,keysCollected_List]:=*)
(*Complement[*)
(*Flatten[Select[doorsBetween,MemberQ[#[[1]],currentKey]\[And]Complement[#[[2]],ToUpperCase/@keysCollected]==={}&][[;;,1]]],*)
(*keysCollected*)
(*]*)


(* ::Input:: *)
(*states={{"@",{"@"},0}};*)
(*Do[*)
(*states=*)
(*DeleteDuplicatesBy[*)
(*SortBy[*)
(*Flatten[*)
(*Table[*)
(*{#,Sort[Join[state[[2]],{#}]],state[[3]]+(Sort[{state[[1]],#}]/.keyDistances)}*)
(*&/@obtainableKeys[state[[1]],state[[2]]]*)
(*,{state,states}],*)
(*1],*)
(*Last],*)
(*{#[[1]],#[[2]]}&];*)
(*Print[{i,Length[states]}],*)
(*{i,26}]*)


(* ::Input:: *)
(*states[[1]]*)


(* ::Input:: *)
(**)


(* ::Subsubsection:: *)
(*Part 2*)


(* ::Input:: *)
(*input=Characters/@Flatten[Import[FileNameJoin[{NotebookDirectory[],"Day18Input.txt"}],"Table"]];*)
(**)
(*position=FirstPosition[input,"@"];*)
(*(input[[#[[1]]-1;;#[[1]]+1,#[[2]]-1;;#[[2]]+1]]={{"@1","#","@2"},{"#","#","#"},{"@3","#","@4"}})&@position;*)
(**)
(*board=Flatten[Table[{i,j}->input[[i,j]],{i,Length[input]},{j,Length[input[[i]]]}]];*)
(*viewBoard=SparseArray[board];*)
(**)
(*doors=Sort[viewBoard[[#[[1]],#[[2]]]]->#&/@Position[input,_?(UpperCaseQ[#]&),{2},Heads->False]];*)
(*keys=Join[*)
(*viewBoard[[#[[1]],#[[2]]]]->#&/@Position[input,_?(Characters[#][[1]]=="@"&)],*)
(*Sort[viewBoard[[#[[1]],#[[2]]]]->#&/@Position[input,_?(LowerCaseQ[#]&),{2},Heads->False]]*)
(*];*)
(**)
(*style={Background->GrayLevel[0],BaseStyle->{Directive[White,EdgeForm[],Opacity[1]]},VertexShapeFunction->(Rectangle[#1+.5,#1-.5]&),EdgeShapeFunction->(Rectangle[#1[[1]]+.5,#1[[2]]-.5]&)};*)
(*g=Graph[*)
(*Union[Flatten[Table[*)
(*If[*)
(*StringMatchQ[viewBoard[[i,j]],Except[{"#"}]..],*)
(*{If[StringMatchQ[viewBoard[[i+1,j]],Except[{"#"}]..],ToString[{i,j}]\[UndirectedEdge]ToString[{i+1,j}]],*)
(*If[StringMatchQ[viewBoard[[i,j+1]],Except[{"#"}]..],ToString[{i,j}]\[UndirectedEdge]ToString[{i,j+1}]]}*)
(*],{i,81-1},{j,81-1}]]][[2;;]]];*)
(**)
(*separatedKeys=Map[*)
(*#->(#/.keys)&,*)
(*SortBy[*)
(*Table[*)
(*Sort[Select[ConnectedComponents[g][[i]]/.(ToString[#[[1]]]->#[[2]]&/@board),LowerCaseQ[#]\[Or]Characters[#][[1]]=="@"&]],*)
(*{i,4}],*)
(*First],*)
(*{2}];*)
(**)
(*separatedKeyDistances=*)
(*Table[*)
(*Table[*)
(*key->GraphDistance[g,ToString[key[[1]]/.keys],ToString[key[[2]]/.keys]],*)
(*{key,Subsets[separatedKeys[[i]],{2}][[;;,;;,1]]}],*)
(*{i,4}];*)
(**)
(*doorCoordinates=ToString[#[[2]]]->#[[1]]&/@doors;*)
(*doorsBetween=*)
(*Table[*)
(*Table[*)
(*key->Intersection[*)
(*FindShortestPath[g,ToString[key[[1]]/.keys],ToString[key[[2]]/.keys]],*)
(*ToString/@doors[[;;,2]]]/.*)
(*doorCoordinates,*)
(*{key,Subsets[separatedKeys[[i]],{2}][[;;,;;,1]]}],*)
(*{i,4}];*)
(**)
(*obtainableKeys[currentKey_String,keysCollected_List,n_Integer]:=*)
(*Complement[*)
(*Flatten[Select[doorsBetween[[n]],MemberQ[#[[1]],currentKey]\[And]Complement[#[[2]],ToUpperCase/@keysCollected]==={}&][[;;,1]]],*)
(*keysCollected*)
(*]*)


(* ::Input:: *)
(*states={{{"@1","@2","@3","@4"},{"@1","@2","@3","@4"},0}};*)
(*Do[*)
(*states=*)
(*DeleteDuplicatesBy[*)
(*SortBy[*)
(*Flatten[*)
(*Table[*)
(*Table[*)
(*{ReplacePart[state[[1]],i->#],Sort[Join[state[[2]],{#}]],state[[3]]+(Sort[{state[[1,i]],#}]/.separatedKeyDistances[[i]])}*)
(*&/@obtainableKeys[state[[1,i]],state[[2]],i],*)
(*{i,4}*)
(*],{state,states}],*)
(*2],*)
(*Last],*)
(*{#[[1]],#[[2]]}&];*)
(*Print[{i,Length[states]}],*)
(*{i,26}]*)


(* ::Input:: *)
(*states[[1,-1]]*)
