(* ::Package:: *)

(* ::Text:: *)
(*Written December 13th, 2019.*)


(* ::Subsubsection:: *)
(*Import*)


(* ::Input:: *)
(*input=ToExpression/@(StringSplit[#,","]&@Flatten[Import[FileNameJoin[{NotebookDirectory[],"Day13Input.txt"}],"Table"]][[1]]);*)
(*input=Thread[Range[0,Length[#]-1]->#&@input];;*)


(* ::Input:: *)
(*ClearAll@runIntcode;*)
(*runIntcode[inputList_List,inputValues_List,initialPosition_Integer,initialBase_Integer,OptionsPattern[{"OutputSteps"->False}]]:=*)
(*Module[{*)
(*intcodeProgram,*)
(*stepList={},*)
(*outputValue={},*)
(**)
(*padLengths={1->5,2->5,3->3,4->3,5->4,6->4,7->5,8->5,9->3},*)
(**)
(*i,jump,counter,*)
(**)
(*j,inputValue,*)
(*outputFlag=0,*)
(*inputFlag=0,*)
(*fullOpCode,opCode,parameterModes,parameters,*)
(**)
(*relativeBase=initialBase,memory*)
(*},*)
(*intcodeProgram[n_Integer]:=0;*)
(*(*Do[intcodeProgram[i]=inputList\[LeftDoubleBracket]i\[RightDoubleBracket],{i,Length[inputList]}];*)*)
(*Do[intcodeProgram[inputList[[i,1]]]=inputList[[i,2]],{i,Length[inputList]}];*)
(**)
(*i=initialPosition;jump=1;counter=1;*)
(*j=1;*)
(**)
(*While[intcodeProgram[i]!=99,*)
(*fullOpCode=*)
(*PadLeft[IntegerDigits[intcodeProgram[i]],*)
(*IntegerDigits[intcodeProgram[i]][[-1]]/.padLengths];*)
(*opCode=FromDigits[fullOpCode[[-2;;]]];*)
(*parameterModes=Reverse[fullOpCode[[;;-3]]];*)
(*parameters=Table[*)
(*Which[*)
(*parameterModes[[j]]==0,*)
(*intcodeProgram[i+j],*)
(**)
(*parameterModes[[j]]==1,*)
(*i+j,*)
(**)
(*parameterModes[[j]]==2,*)
(*intcodeProgram[i+j]+relativeBase],*)
(*{j,Length[parameterModes]}];*)
(*jump=Length[parameterModes]+1;*)
(**)
(*If[OptionValue["OutputSteps"],*)
(*AppendTo[stepList,*)
(*Table[intcodeProgram[i+j],{j,0,Length[parameterModes]}]]];*)
(**)
(*Which[*)
(*opCode==1,*)
(*intcodeProgram[parameters[[3]]]=intcodeProgram[parameters[[2]]]+intcodeProgram[parameters[[1]]],*)
(**)
(*opCode==2,*)
(*intcodeProgram[parameters[[3]]]=intcodeProgram[parameters[[2]]]*intcodeProgram[parameters[[1]]],*)
(**)
(*opCode==3,*)
(*If[inputFlag==1,*)
(*Return[{#[[1,1,1]]->#[[1,1]]&/@DownValues[intcodeProgram][[;;-2]],i,relativeBase,outputValue}],*)
(**)
(*inputValue=inputValues[[j]];*)
(*intcodeProgram[parameters[[1]]]=inputValue;*)
(*inputFlag=1;j+=1;];,*)
(**)
(*opCode==4,*)
(*AppendTo[outputValue,intcodeProgram[parameters[[1]]]];*)
(*outputFlag+=1;*)
(*(*Print[outputValue]*),*)
(**)
(*opCode==5,*)
(*If[intcodeProgram[parameters[[1]]]!=0,*)
(*i=intcodeProgram[parameters[[2]]];*)
(*jump=0],*)
(**)
(*opCode==6,*)
(*If[intcodeProgram[parameters[[1]]]==0,*)
(*i=intcodeProgram[parameters[[2]]];*)
(*jump=0],*)
(**)
(*opCode==7,*)
(*If[intcodeProgram[parameters[[1]]]<intcodeProgram[parameters[[2]]],*)
(*intcodeProgram[parameters[[3]]]=1,*)
(*intcodeProgram[parameters[[3]]]=0],*)
(**)
(*opCode==8,*)
(*If[intcodeProgram[parameters[[1]]]==intcodeProgram[parameters[[2]]],*)
(*intcodeProgram[parameters[[3]]]=1,*)
(*intcodeProgram[parameters[[3]]]=0],*)
(**)
(*opCode==9,*)
(*relativeBase+=intcodeProgram[parameters[[1]]],*)
(**)
(*opCode==99\[Or]i>Length[intcodeProgram],*)
(*Break[]*)
(*];*)
(*counter++;*)
(*If[counter>1000000,*)
(*Print["Infinite Loop"];*)
(*Break[]];*)
(*i+=jump;*)
(*];*)
(*If[intcodeProgram[i]==99,*)
(*Return[{#[[1,1,1]]->#[[1,1]]&/@DownValues[intcodeProgram][[;;-2]],i,relativeBase,outputValue,"Halt"}]];*)
(*If[*)
(*OptionValue["OutputSteps"],*)
(*{outputValue,stepList},*)
(*outputValue]*)
(*]*)


(* ::Subsubsection:: *)
(*Part 1*)


(* ::Input:: *)
(*state=runIntcode[input,{0},0,0];*)


(* ::Input:: *)
(*Count[state[[4,3;;;;3]],_?(#==2&)]*)


(* ::Subsubsection:: *)
(*Part 2*)


(* ::Input:: *)
(*input=ToExpression/@(StringSplit[#,","]&@Flatten[Import[FileNameJoin[{NotebookDirectory[],"Day13Input.txt"}],"Table"]][[1]]);*)
(*input=Thread[Range[0,Length[#]-1]->#&@input];*)
(*input[[1]]=(0->2);*)
(**)
(*newState=runIntcode[input,{0},0,0];*)
(*score=0;*)
(*ClearAll@board;*)
(*direction=0;*)
(*ClearAll[previousBallPosition,projectedBallPosition,projectedBallPosition,paddlePosition];*)
(**)
(*Do[*)
(*If[*)
(*i[[1]]==-1\[And]i[[2]]==0,*)
(*score=i[[3]],*)
(*board[{i[[1]],i[[2]]}]=i[[3]]],*)
(*{i,Partition[newState[[4]],3]}];*)
(**)
(*viewGame=#[[1,1,1]]->#[[1,1]]&/@DownValues[board];*)
(*viewGame=#[[1,1,1]]-(Min[viewGame[[;;,1]]]-1)->#[[1,1]]&/@DownValues[board];*)
(**)
(*f[n_Integer]:=*)
(*Module[{},*)
(*newState=runIntcode[newState[[1]],{n},newState[[2]],newState[[3]]];*)
(*Do[*)
(*If[*)
(*i[[1]]==-1\[And]i[[2]]==0,*)
(*score=i[[3]],*)
(*board[{i[[1]],i[[2]]}]=i[[3]]],*)
(*{i,Partition[newState[[4]],3]}];*)
(**)
(*viewGame=#[[1,1,1]]+1->#[[1,1]]&/@DownValues[board];*)
(**)
(*paddlePosition=SelectFirst[viewGame,#[[-1]]==3&][[1,1]];*)
(*previousBallPosition=ballPosition;*)
(*ballPosition=SelectFirst[viewGame,#[[-1]]==4&][[1]];*)
(*];*)
(**)
(*While[Length[newState]!=5,*)
(*Which[*)
(*ballPosition[[1]]<paddlePosition,direction=-1,*)
(*ballPosition[[1]]==paddlePosition,direction=0,*)
(*ballPosition[[1]]>paddlePosition,direction=1]*)
(*f[direction];*)
(*]*)


(* ::Input:: *)
(*Dynamic[*)
(*Column[{*)
(*Row[{ArrayPlot[Transpose[SparseArray[viewGame]],ImageSize->Large,ColorRules->{0->White,1->Gray,2->Black,3->Green,4->Red}],"      ",Column[{score,Count[viewGame,_?(#[[2]]==2&)]}]}]}*)
(*]]*)
