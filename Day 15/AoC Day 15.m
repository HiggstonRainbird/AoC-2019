(* ::Package:: *)

(* ::Text:: *)
(*Written December 15th, 2019.*)


(* ::Subsubsection:: *)
(*Import*)


(* ::Input:: *)
(*input=ToExpression/@(StringSplit[#,","]&@Flatten[Import[FileNameJoin[{NotebookDirectory[],"Day15Input.txt"}],"Table"]][[1]]);*)
(*input=Thread[Range[0,Length[#]-1]->#&@input];*)


(* ::Input:: *)
(*ClearAll@runIntcode;*)
(*runIntcode[inputList_List,inputValues_List,initialPosition_Integer,initialBase_Integer,OptionsPattern[{"OutputSteps"->False}]]:=*)
(*Module[{*)
(*intcodeProgram,*)
(*stepList={},*)
(*outputValue={},*)
(**)
(*padLengths={1->5,2->5,3->3,4->3,5->4,6->4,7->5,8->5,9->3},*)
(**)
(*i,jump,counter,*)
(**)
(*j,inputValue,*)
(*outputFlag=0,*)
(*inputFlag=0,*)
(*fullOpCode,opCode,parameterModes,parameters,*)
(**)
(*relativeBase=initialBase,memory*)
(*},*)
(*intcodeProgram[n_Integer]:=0;*)
(*(*Do[intcodeProgram[i]=inputList\[LeftDoubleBracket]i\[RightDoubleBracket],{i,Length[inputList]}];*)*)
(*Do[intcodeProgram[inputList[[i,1]]]=inputList[[i,2]],{i,Length[inputList]}];*)
(**)
(*i=initialPosition;jump=1;counter=1;*)
(*j=1;*)
(**)
(*While[intcodeProgram[i]!=99,*)
(*fullOpCode=*)
(*PadLeft[IntegerDigits[intcodeProgram[i]],*)
(*IntegerDigits[intcodeProgram[i]][[-1]]/.padLengths];*)
(*opCode=FromDigits[fullOpCode[[-2;;]]];*)
(*parameterModes=Reverse[fullOpCode[[;;-3]]];*)
(*parameters=Table[*)
(*Which[*)
(*parameterModes[[j]]==0,*)
(*intcodeProgram[i+j],*)
(**)
(*parameterModes[[j]]==1,*)
(*i+j,*)
(**)
(*parameterModes[[j]]==2,*)
(*intcodeProgram[i+j]+relativeBase],*)
(*{j,Length[parameterModes]}];*)
(*jump=Length[parameterModes]+1;*)
(**)
(*If[OptionValue["OutputSteps"],*)
(*AppendTo[stepList,*)
(*Table[intcodeProgram[i+j],{j,0,Length[parameterModes]}]]];*)
(**)
(*Which[*)
(*opCode==1,*)
(*intcodeProgram[parameters[[3]]]=intcodeProgram[parameters[[2]]]+intcodeProgram[parameters[[1]]],*)
(**)
(*opCode==2,*)
(*intcodeProgram[parameters[[3]]]=intcodeProgram[parameters[[2]]]*intcodeProgram[parameters[[1]]],*)
(**)
(*opCode==3,*)
(*If[inputFlag==1,*)
(*Return[{#[[1,1,1]]->#[[1,1]]&/@DownValues[intcodeProgram][[;;-2]],i,relativeBase,outputValue}],*)
(**)
(*inputValue=inputValues[[j]];*)
(*intcodeProgram[parameters[[1]]]=inputValue;*)
(*inputFlag=1;j+=1;];,*)
(**)
(*opCode==4,*)
(*AppendTo[outputValue,intcodeProgram[parameters[[1]]]];*)
(*outputFlag+=1;*)
(*(*Print[outputValue]*),*)
(**)
(*opCode==5,*)
(*If[intcodeProgram[parameters[[1]]]!=0,*)
(*i=intcodeProgram[parameters[[2]]];*)
(*jump=0],*)
(**)
(*opCode==6,*)
(*If[intcodeProgram[parameters[[1]]]==0,*)
(*i=intcodeProgram[parameters[[2]]];*)
(*jump=0],*)
(**)
(*opCode==7,*)
(*If[intcodeProgram[parameters[[1]]]<intcodeProgram[parameters[[2]]],*)
(*intcodeProgram[parameters[[3]]]=1,*)
(*intcodeProgram[parameters[[3]]]=0],*)
(**)
(*opCode==8,*)
(*If[intcodeProgram[parameters[[1]]]==intcodeProgram[parameters[[2]]],*)
(*intcodeProgram[parameters[[3]]]=1,*)
(*intcodeProgram[parameters[[3]]]=0],*)
(**)
(*opCode==9,*)
(*relativeBase+=intcodeProgram[parameters[[1]]],*)
(**)
(*opCode==99\[Or]i>Length[intcodeProgram],*)
(*Break[]*)
(*];*)
(*counter++;*)
(*If[counter>1000000,*)
(*Print["Infinite Loop"];*)
(*Break[]];*)
(*i+=jump;*)
(*];*)
(*If[intcodeProgram[i]==99,*)
(*Return[{#[[1,1,1]]->#[[1,1]]&/@DownValues[intcodeProgram][[;;-2]],i,relativeBase,outputValue,"Halt"}]];*)
(*If[*)
(*OptionValue["OutputSteps"],*)
(*{outputValue,stepList},*)
(*outputValue]*)
(*]*)


(* ::Subsubsection:: *)
(*Part 1*)


(* ::Input:: *)
(*state={input,0,0,0};*)
(*ClearAll@board;*)
(*x=0;*)
(*y=0;*)
(*board[{x,y}]=2;*)
(**)
(*f[i_Integer]:=*)
(*Module[{},*)
(*state=runIntcode[state[[1]],{i},state[[2]],state[[3]]];*)
(*Which[*)
(*i==1,board[{y-1,x}]=state[[4,1]],*)
(*i==2,board[{y+1,x}]=state[[4,1]],*)
(*i==3,board[{y,x-1}]=state[[4,1]],*)
(*i==4,board[{y,x+1}]=state[[4,1]]*)
(*];*)
(**)
(*If[state[[4,1]]!=0,*)
(*Which[*)
(*i==1,y-=1,*)
(*i==2,y+=1,*)
(*i==3,x-=1,*)
(*i==4,x+=1*)
(*]];*)
(*viewBoard=Join[{{y,x}->3},#[[1,1,1]]->#[[1,1]]&/@DownValues[board]];*)
(*viewBoard={#[[1,1]]-(Min[viewBoard[[;;,1,1]]]-1),#[[1,2]]-(Min[viewBoard[[;;,1,2]]]-1)}->#[[2]]&/@viewBoard;]*)


(* ::Input:: *)
(*f[1]*)


(* ::Input:: *)
(*DynamicModule[*)
(*{},*)
(*EventHandler[*)
(*Dynamic[ArrayPlot[SparseArray[viewBoard,{Max@viewBoard[[;;,1,1]],Max@viewBoard[[;;,1,2]]},4],ColorRules->{0->Black,1->White,2->Green,3->Red,4->Gray}]],*)
(*{"LeftArrowKeyDown":>f[3],*)
(*"RightArrowKeyDown":>f[4],*)
(*"UpArrowKeyDown":>f[1],*)
(*"DownArrowKeyDown":>f[2]}]]*)


(* ::Input:: *)
(**)


(* ::Input:: *)
(**)


(* ::Input:: *)
(**)


(* ::Input:: *)
(*nodes=Select[viewBoard,#[[2]]==1\[Or]#[[2]]==2&];*)
(*g=Graph[*)
(*DeleteCases[*)
(*DeleteDuplicates@*)
(*Flatten[Table[*)
(*{If[MemberQ[{1,2,3},(node[[1]]+{1,0}/.viewBoard)],#[[1]]\[UndirectedEdge]#[[2]]&@Sort[{node[[1]],node[[1]]+{1,0}}]],*)
(*If[MemberQ[{1,2,3},(node[[1]]-{1,0}/.viewBoard)],#[[1]]\[UndirectedEdge]#[[2]]&@Sort[{node[[1]],node[[1]]-{1,0}}]],*)
(*If[MemberQ[{1,2,3},(node[[1]]+{0,1}/.viewBoard)],#[[1]]\[UndirectedEdge]#[[2]]&@Sort[{node[[1]],node[[1]]+{0,1}}]],*)
(*If[MemberQ[{1,2,3},(node[[1]]-{0,1}/.viewBoard)],#[[1]]\[UndirectedEdge]#[[2]]&@Sort[{node[[1]],node[[1]]-{0,1}}]]},*)
(*{node,nodes}]],*)
(*Null]];*)


(* ::Text:: *)
(*227 is too low.*)


(* ::Input:: *)
(*ArrayPlot[*)
(*SparseArray[*)
(*Join[*)
(*Thread[#->Table[5,{i,Length[#]}]&@FindShortestPath[g,Select[viewBoard,#[[2]]==2&][[1,1]],Select[viewBoard,#[[2]]==2&][[2,1]]]],*)
(*viewBoard],*)
(*{Max@viewBoard[[;;,1,1]],Max@viewBoard[[;;,1,2]]},4],ColorRules->{0->Black,1->White,2->Green,3->Red,4->Gray,5->Pink}]*)


(* ::Subsubsection:: *)
(*Part 2*)


(* ::Input:: *)
(*Max@GraphDistance[g,Select[viewBoard,#[[2]]==2&][[2,1]]]*)
